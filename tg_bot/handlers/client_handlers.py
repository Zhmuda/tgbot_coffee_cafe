import logging
import os

import aiogram
from aiogram import Dispatcher, types
from aiogram.types import ContentType
from database.database import get_user, post_user, update_user, get_user_state, post_item_in_order, \
    get_unfinished_order, get_order_items, get_menu_item, update_order, get_payment_order, get_orders, get_locations, \
    get_cafe_address_by_id, get_order_byId, delete_orders, get_users_by_role, get_coffee_variants, get_variant_for_item
from tg_bot import elements
from tg_bot.create_bot import bot
from tg_bot.logger.logger import print_error_double_click


async def process_start(message: types.Message):
    user_id = str(message.from_user.id)

    try:
        user = get_user(user_id)
        if not user:
            post_user(user_id)

        delete_orders(user_id, ['in_progress', 'during_payment'])

        await bot.send_photo(chat_id=user_id,
                             photo=open(
                                 r'C:\Users\danii\PycharmProjects\TelegramBotCoffeeHouse\–º–µ–Ω—é.jpeg', 'rb')
                             )

        await bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=elements.get_coffee_position_button()
        )
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_position(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    coffee_id = callback_query.data.split('_')[1]

    try:
        variants = get_coffee_variants(coffee_id)

        if not variants:
            await bot.send_message(
                chat_id=user_id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ñ–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )
            return

        await bot.edit_message_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–ª—è {variants[0].menu_item.name}:",
            chat_id=user_id,
            message_id=callback_query.message.message_id,
            reply_markup=elements.get_create_size_button(variants)
        )
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_size(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    coffee_id, size = callback_query.data.split('_')[1:3]

    try:
        await bot.edit_message_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {elements.coffee_positions[int(coffee_id) - 1]['name']} ({size}):",
            chat_id=user_id,
            message_id=callback_query.message.message_id,
            reply_markup=elements.get_create_quantity_buttons(coffee_id, size)
        )
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_quantity(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    coffee_id, size, quantity = callback_query.data.split('_')[1:]

    try:
        quantity_numeric = int(''.join(filter(str.isdigit, quantity)))

        post_item_in_order(user_id, coffee_id, quantity_numeric, size)

        await bot.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            chat_id=user_id,
            message_id=callback_query.message.message_id,
            reply_markup=elements.get_coffee_position_button()
        )

    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_giving_location(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    try:
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            print_error_double_click(callback_query.from_user.id)

        await bot.send_message(chat_id=user_id,
                               text="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, "
                                    "—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –∫–æ—Ñ–µ–π–Ω—é ‚òï.",
                               reply_markup=elements.get_location_button())
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_location(message: types.Message):
    if message.location:
        user_coordinates = (message.location.latitude, message.location.longitude)

        try:
            distances = get_locations(user_coordinates)

            nearest = min(distances, key=lambda x: x['distance'])

            await message.answer(
                f"–ë–ª–∏–∂–∞–π—à–∞—è –∫–æ—Ñ–µ–π–Ω—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å:\n\n"
                f"üìç –ê–¥—Ä–µ—Å: {nearest['address']}\n"
                f"üö∂‚Äç‚ôÇÔ∏è –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {nearest['distance']:.2f} –º\n\n",
                reply_markup=elements.get_confirm_location_button(nearest['id'])
            )

        except Exception as e:
            logging.error(f"An error occurred: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–µ–π –∫–æ—Ñ–µ–π–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_finish_order(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    cafe_id = callback_query.data.split("_")[-1]
    try:
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            print_error_double_click(callback_query.from_user.id)

        order = get_unfinished_order(user_id)

        if order:
            order_items = get_order_items(order.id)

            cafe_address = get_cafe_address_by_id(cafe_id)
            update_order(order.id, {'pickup_location': cafe_address})

            order_details = f"–í–∞—à –∑–∞–∫–∞–∑:\n\n"
            total_price = 0

            for item in order_items:
                menu_item = get_menu_item(item.menu_item_id)
                variant_item = get_variant_for_item(item.menu_item_id, item.size)
                item_total = variant_item.cost * item.quantity
                total_price += item_total
                order_details += f"{menu_item.name} - {item.quantity} —à—Ç. " \
                                 f"–ø–æ {variant_item.cost} —Ä—É–±. = {item_total} —Ä—É–±.\n"

            update_order(order.id, {'total_price': total_price})

            order_details += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
            order_details += f"–ê–¥—Ä–µ—Å: {cafe_address}"

            await callback_query.message.answer(order_details, reply_markup=elements.get_order_confirm_button())

        else:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")

    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_send_way_payment(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    try:
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            print_error_double_click(callback_query.from_user.id)

        await callback_query.message.answer(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?",
            reply_markup=elements.get_payment_method_buttons()
        )
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_order_confirm(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    payment_method = callback_query.data.split("_")[-1]

    try:
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            print_error_double_click(callback_query.from_user.id)

        order = get_unfinished_order(user_id)

        if order:
            order_items = get_order_items(order.id)

            order_details = f"–í–∞—à –∑–∞–∫–∞–∑:\n\n"
            total_price = 0

            for item in order_items:
                menu_item = get_menu_item(item.menu_item_id)
                variant_item = get_variant_for_item(item.menu_item_id, item.size)
                item_total = variant_item.cost * item.quantity
                total_price += item_total
                order_details += f"{menu_item.name} - {item.quantity} —à—Ç. " \
                                 f"–ø–æ {variant_item.cost} —Ä—É–±. = {item_total} —Ä—É–±.\n"

            order_details += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±."

            update_order(order.id, {'status': 'during_payment'})

            amount = total_price * 100

            if payment_method == "card":
                await bot.send_invoice(
                    chat_id=user_id,
                    title=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}",
                    description=order_details,
                    payload="pay_order",
                    provider_token=os.getenv('YOOTOKEN'),
                    currency="RUB",
                    start_parameter="pay_order",
                    prices=[{"label": "–†—É–±", "amount": amount}]
                )

            elif payment_method == "wallet":
                user = get_user(user_id)
                if user.loyalty_points:
                    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∫–æ—à–µ–ª—å–∫–æ–º. "
                                                        f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user.loyalty_points}",
                                                        reply_markup=elements.get_wallet_payment_buttons(total_price,
                                                                                                         order.id))
                else:
                    await callback_query.message.answer(
                        f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–æ—à–µ–ª—å–∫–∞.\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /wallet –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞")

                    await callback_query.message.answer(
                        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.\n\n"
                        f"–ö –æ–ø–ª–∞—Ç–µ: {int(total_price * 0.95)} —Ä—É–±–ª–µ–π",
                        reply_markup=elements.get_repeat_pay_button(order.id)
                    )

        else:
            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")

    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_payment_using_wallet(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    order_id = int(callback_query.data.split("_")[-1])

    try:
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            print_error_double_click(callback_query.from_user.id)

        order = get_order_byId(order_id)
        if order:
            user = get_user(user_id)

            discount_amount = int(order.total_price * 0.95)
            remaining_amount = user.loyalty_points - discount_amount

            if remaining_amount >= 0:

                update_user(user_id, {'loyalty_points': remaining_amount})

                update_order(order.id, {'status': "In processing"})
                await bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{order.id} "
                                                f"–Ω–∞ —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏ "
                                                f"{int(order.total_price * 0.95)} —Ä—É–±–ª–µ–π!\n\n"
                                                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")

                await callback_query.message.answer(
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {remaining_amount} –±–∞–ª–ª–æ–≤.\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!"
                )

                admins = get_users_by_role('admin')

                order_items = get_order_items(order.id)

                order_details = f"–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n\n"
                total_price = 0

                for item in order_items:
                    menu_item = get_menu_item(item.menu_item_id)
                    variant_item = get_variant_for_item(item.menu_item_id, item.size)
                    item_total = variant_item.cost * item.quantity
                    total_price += item_total
                    order_details += f"{menu_item.name} - {item.quantity} —à—Ç. " \
                                     f"–ø–æ {variant_item.cost} —Ä—É–±. = {item_total} —Ä—É–±.\n"

                order_details += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±."

                for admin in admins:
                    await bot.send_message(admin.tg_user_id, f"–ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Ññ{order.id}\n\n"
                                                             f"{order_details}",
                                           reply_markup=elements.get_exec_order_button(order.id))

            else:
                await callback_query.message.answer(
                    f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ.\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user.loyalty_points} –±–∞–ª–ª–æ–≤.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /wallet –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
                )

                await callback_query.message.answer(
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.",
                    reply_markup=elements.get_repeat_pay_button(order.id)
                )

        else:
            await callback_query.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def process_getting_orders(message: types.Message):
    user_id = str(message.from_user.id)

    try:
        orders = get_orders(user_id)

        if not orders:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        else:
            order_details = "–í–∞—à–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
            for order in orders:
                if order.status == 'In processing':
                    order_details += f"–ó–∞–∫–∞–∑ #{order.id} - –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n"
                elif order.status == 'Cook':
                    order_details += f"–ó–∞–∫–∞–∑ #{order.id} - –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–∏—Ç—Å—è\n"
                elif order.status == 'Completed':
                    order_details += f"–ó–∞–∫–∞–∑ #{order.id} - –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω\n"

            await message.answer(order_details)

    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


async def process_wallet(message: types.Message):
    user_id = str(message.from_user.id)
    try:
        user = get_user(user_id)
        if user.loyalty_points is None:
            await bot.send_message(
                chat_id=user_id,
                text="–£ –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–Ω –∫–æ—à–µ–ª–µ–∫!\n\n"
                     "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ä—è–¥—ã –∫–æ—Ñ–µ–º–∞–Ω–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å' ‚òï",
                reply_markup=elements.get_loyalty_confirm_button()
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—à–µ–ª–µ–∫ Coffee House! ‚òï\n\n"
                     "–° –ø–æ–º–æ—â—å—é –∫–æ—à–µ–ª—å–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤ "
                     "–≤ –Ω–∞—à–µ–º –∫–∞—Ñ–µ. "
                     "–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5% –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞. üéâ\n\n"
                     "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤—ã–≥–æ–¥–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏!",
                reply_markup=elements.get_pay_balance_button()
            )
            await bot.send_message(
                chat_id=user_id,
                text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.loyalty_points} —Ä—É–±–ª–µ–π üòÑ",
            )

    except Exception as e:

        logging.error(f"An error occurred: {str(e)}")


async def process_create_wallet(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)

    try:
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            print_error_double_click(callback_query.from_user.id)

        update_user(user_id, {'loyalty_points': 0})

        await bot.send_message(
            chat_id=user_id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—à–µ–ª–µ–∫ Coffee House! ‚òï\n\n"
                 "–° –ø–æ–º–æ—â—å—é –∫–æ—à–µ–ª—å–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤ –≤ –Ω–∞—à–µ–º –∫–∞—Ñ–µ. "
                 "–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5% –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞. üéâ\n\n"
                 "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤—ã–≥–æ–¥–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏!",
            reply_markup=elements.get_pay_balance_button()
        )
    except Exception as e:

        logging.error(f"An error occurred: {str(e)}")


async def process_choose_money(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)

    try:
        try:
            await bot.delete_message(user_id, callback_query.message.message_id)
        except aiogram.exceptions.MessageToDeleteNotFound:
            print_error_double_click(callback_query.from_user.id)

        update_user(user_id, {'state': 'choose_money'})

        await bot.send_message(
            chat_id=user_id,
            text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞.",
        )
    except Exception as e:

        logging.error(f"An error occurred: {str(e)}")


async def process_check_money_for_pay_balance(message: types.Message):
    user_id = str(message.from_user.id)

    try:

        if message.text.isdigit():
            amount = int(message.text) * 100
            await bot.send_invoice(
                chat_id=user_id,
                title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {message.text}",
                payload="pay_balance",
                provider_token=os.getenv('YOOTOKEN'),
                currency="RUB",
                start_parameter="pay_balance",
                prices=[{"label": "–†—É–±", "amount": amount}]
            )

            update_user(user_id, {'state': 'pay_money'})

        else:
            await bot.send_message(
                chat_id=user_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.",
            )
    except Exception as e:

        logging.error(f"An error occurred: {str(e)}")


async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


# –ì–¥–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
async def process_successful_pay(message: types.Message):
    user_id = str(message.from_user.id)

    try:

        if message.successful_payment.invoice_payload == 'pay_balance':
            sum_balance = message.successful_payment.total_amount // 100
            user = get_user(user_id)
            final_balance = user.loyalty_points + sum_balance
            update_user(user_id, {'state': 'Default', 'loyalty_points': final_balance})
            await bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É "
                                            f"{sum_balance} —Ä—É–±–ª–µ–π!\n\n"
                                            f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /wallet, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å!")

        elif message.successful_payment.invoice_payload == 'pay_order':
            sum_balance = message.successful_payment.total_amount // 100
            order = get_payment_order(user_id)
            update_order(order.id, {'status': "In processing"})
            await bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ ‚Ññ{order.id} –Ω–∞ —Å—É–º–º—É "
                                            f"{sum_balance} —Ä—É–±–ª–µ–π!\n\n"
                                            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")

            admins = get_users_by_role('admin')

            order_items = get_order_items(order.id)

            order_details = f"–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n\n"
            total_price = 0

            for item in order_items:
                menu_item = get_menu_item(item.menu_item_id)
                variant_item = get_variant_for_item(item.menu_item_id, item.size)
                item_total = variant_item.cost * item.quantity
                total_price += item_total
                order_details += f"{menu_item.name} - {item.quantity} —à—Ç. " \
                                 f"–ø–æ {variant_item.cost} —Ä—É–±. = {item_total} —Ä—É–±.\n"

            order_details += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±."

            for admin in admins:
                await bot.send_message(admin.tg_user_id, f"–ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Ññ{order.id}\n\n"
                                                         f"{order_details}",
                                       reply_markup=elements.get_exec_order_button(order.id))

    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(process_start, commands=['start'])
    dp.register_message_handler(process_wallet, commands=['wallet'])
    dp.register_message_handler(process_getting_orders, commands=['order_status'])
    dp.register_callback_query_handler(process_position, lambda c: c.data.startswith("position_"))
    dp.register_callback_query_handler(process_size, lambda c: c.data.startswith("size_"))
    dp.register_callback_query_handler(process_quantity, lambda c: c.data.startswith("quantity_"))
    dp.register_callback_query_handler(process_giving_location, lambda c: c.data.startswith("order_confirmation_"))
    dp.register_message_handler(process_location, content_types=["location"])
    dp.register_callback_query_handler(process_finish_order, lambda c: c.data.startswith("confirm_location_"))
    dp.register_callback_query_handler(process_send_way_payment, lambda c: c.data.startswith("order_confirm_"))
    dp.register_callback_query_handler(process_order_confirm, lambda c: c.data.startswith("payment_method_"))
    dp.register_callback_query_handler(process_payment_using_wallet, lambda c: c.data.startswith("pay_button_"))
    dp.register_callback_query_handler(process_create_wallet, lambda c: c.data.startswith('loyalty_confirm_'))
    dp.register_callback_query_handler(process_choose_money, lambda c: c.data.startswith('pay_balance_'))
    dp.register_message_handler(process_check_money_for_pay_balance,
                                lambda message: get_user_state(message.from_user.id) == 'choose_money')
    dp.register_pre_checkout_query_handler(process_pre_checkout_query)
    dp.register_message_handler(process_successful_pay, content_types=ContentType.SUCCESSFUL_PAYMENT)
